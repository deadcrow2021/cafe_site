"""Fix Food and Restaurant tables, add City

Revision ID: c1b432f0904d
Revises: 315f6116cf1a
Create Date: 2025-07-16 13:44:17.547697

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c1b432f0904d"
down_revision: Union[str, None] = "315f6116cf1a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "city",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("latitude", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.Column("longitude", sa.Numeric(precision=9, scale=6), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "food_characteristic",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("measure_value", sa.String(length=200), nullable=True),
        sa.Column("measure_name", sa.String(length=50), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "food_variant",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("food_id", sa.Integer(), nullable=False),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "ingredient_price_modifier",
            sa.Numeric(precision=10, scale=4),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["food_id"],
            ["food.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "restaurant_category",
        sa.Column("restaurant_id", sa.Integer(), nullable=True),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["menu_category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
    )
    op.create_table(
        "restaurant_food_disabled",
        sa.Column("restaurant_id", sa.Integer(), nullable=True),
        sa.Column("food_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["food_id"],
            ["food.id"],
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
    )
    op.create_table(
        "food_characteristic_variant",
        sa.Column("characteristic_id", sa.Integer(), nullable=True),
        sa.Column("variant_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["characteristic_id"],
            ["food_characteristic.id"],
        ),
        sa.ForeignKeyConstraint(
            ["variant_id"],
            ["food_variant.id"],
        ),
    )
    op.drop_table("category_food")
    op.add_column("food", sa.Column("category_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "food", "menu_category", ["category_id"], ["id"])
    op.drop_column("food", "price")
    op.drop_column("food", "is_active")
    op.drop_column("food", "sub_name")
    op.drop_column("food", "ingredient_price_modifier")
    op.drop_column("food", "food_type")
    op.drop_constraint(
        "menu_category_restaurant_id_fkey", "menu_category", type_="foreignkey"
    )
    op.drop_column("menu_category", "restaurant_id")
    op.add_column("restaurant", sa.Column("city_id", sa.Integer(), nullable=False))
    op.create_foreign_key(None, "restaurant", "city", ["city_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "restaurant", type_="foreignkey")
    op.drop_column("restaurant", "city_id")
    op.add_column(
        "menu_category",
        sa.Column("restaurant_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "menu_category_restaurant_id_fkey",
        "menu_category",
        "restaurant",
        ["restaurant_id"],
        ["id"],
    )
    op.add_column(
        "food",
        sa.Column(
            "food_type", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "food",
        sa.Column(
            "ingredient_price_modifier",
            sa.NUMERIC(precision=10, scale=4),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "food",
        sa.Column(
            "sub_name", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "food",
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "food",
        sa.Column(
            "price",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "food", type_="foreignkey")
    op.drop_column("food", "category_id")
    op.create_table(
        "category_food",
        sa.Column("category_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("food_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["category_id"], ["menu_category.id"], name="category_food_category_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["food_id"], ["food.id"], name="category_food_food_id_fkey"
        ),
    )
    op.drop_table("food_characteristic_variant")
    op.drop_table("restaurant_food_disabled")
    op.drop_table("restaurant_category")
    op.drop_table("food_variant")
    op.drop_table("food_characteristic")
    op.drop_table("city")
    # ### end Alembic commands ###
